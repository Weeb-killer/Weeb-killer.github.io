<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/12/13/django/"/>
      <url>/2023/12/13/django/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title"><a href="#title" class="headerlink" title="title:"></a>title:</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>manage.py 项目管理，启动项目，创建app，数据管理</p><p>asgi.py wsgi.py 接受网络请求 这些都是默认放着不动</p><p>urls.py URL和python函数对应关系放这里 <strong>常操作</strong></p><p>setting.py 项目配置文件 <strong>常操作</strong></p><h3 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h3><p>大的功能叫一个app</p><p>app可以有自己的表结构 函数 html模板 css</p><p> 创建新app后的 文件</p><ul><li>apps.py 固定的 不要动 app启动类</li><li>migrations.py 同上 数据库变更记录</li><li>tests.py 同上 单元测试</li><li>admin.py django默认提供后台管理</li><li>views.py <strong>重要</strong> <strong>url的函数都在这里</strong></li><li>models.py <strong>重要</strong> <strong>对数据库操作</strong></li></ul><h3 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h3><ul><li>确保app注册</li></ul><img src="image-20231204183434973.png" alt="image-20231204183434973" style="zoom:33%;" /><ul><li><p>编写URL和视图函数对应关系 urls.py</p></li><li><p>编写视图函数 views.py</p></li></ul><h3 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h3><p>返回html</p><img src="image-20231204191956907.png" alt="image-20231204191956907" style="zoom:50%;" /><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>一般将</p><ul><li>css</li><li>js</li><li>img</li></ul><p>放在静态文件 static</p><p>这个static文件夹路径可以在setting中更改</p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>本质上就是html上写占位符，然后用数据替换占位符</p><img src="image-20231205183711338.png" alt="image-20231205183711338" style="zoom:50%;" /><h3 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h3><p>request 是一个对象，封装了用户发送过来的所有请求相关数据</p><p>GET 用户请求回应 传递值可以用?进行输入 使用url获取参数</p><p>POST通过请求体得到数据 GET是公开的 POST要抓包</p><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ul><li>Mysql数据库 pymysql</li><li>Django可以更简单 内部提供ORM框架</li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM可以帮我们做两件事</p><ul><li><p>创建 修改 删除数据库中的<strong>表</strong>(不使用SQL语句写) 但不能创建库 </p></li><li><p>操作表中的数据 (不用写sql)</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update...</span><br><span class="line">select...</span><br><span class="line"><span class="keyword">insert</span></span><br></pre></td></tr></table></figure><ul><li>首先自己启动mysql</li><li>用自带的工具创建数据库</li></ul><h3 id="django操作表"><a href="#django操作表" class="headerlink" title="django操作表"></a>django操作表</h3><ul><li>创建表</li><li>删除表</li><li>修改表</li></ul><p>创建表</p><p>在models.py文件中: </p><img src="image-20231208181712873.png" alt="image-20231208181712873" style="zoom:50%;" /><p>那么在sql中的语句会是这样的 相应的表也会这么建</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> app01_userinfo(</span><br><span class="line">id <span class="type">bigint</span> auto_increment <span class="keyword">primary</span> key,<span class="comment">/*这个是自动有的*/</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">    age <span class="type">int</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后输入 命令行</p><p>记住对应的app要注册</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>每次对数据库进行操作后 必须执行上述语句</p><p>对表进行增加列后 django会出现两个选项</p><ul><li><p>1.自己输入值作为该列的初始值</p></li><li><p>2.退出 在py文件中进行设置</p></li></ul><h3 id="操作表中的数据"><a href="#操作表中的数据" class="headerlink" title="操作表中的数据"></a>操作表中的数据</h3><ul><li>新建表</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UserInfo.objects.create(name=<span class="string">&quot;weebk&quot;</span>,password=<span class="string">&quot;123&quot;</span>,age=<span class="number">18</span>)</span><br><span class="line"><span class="comment">#insert into app01_userinfo(name,password,age) values(&quot;weebk&quot;,&quot;123&quot;,18)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
